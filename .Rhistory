library(readr)
termiteData <- read_csv("~/Downloads/termite_data.csv")
View(termiteData)
qqnorm(termiteData$arcsinSqrtSurviving, datax = TRUE)
qqnorm(termiteData$arcsinSqrtSurviving, datax = TRUE, pch = 16, col = "blue", las = 1, ylab = "Proportion surviving", xlab = "Normal quantile", main = "QQ Plot")
shapiro.test(termiteData$arcsinSqrtSurviving)
hist(termiteData$arcsinSqrtSurviving, right = FALSE, col = "red", las-1)
hist(termiteData$arcsinSqrtSurviving, right = FALSE, col = "red", las=1)
hist(termiteData$arcsinSqrtSurviving, right = FALSE, col = "red", las=1, xlab = "Proportion Surviving", main = "Termite Survival")
library(readr)
plantgasData <- read_csv("~/Downloads/plantgas_data.csv")
View(plantgasData)
library(lattice)
histogram( ~ gasEmission | temperature, data = plantgasData, layout = c(1,2), col = "pink", breaks = seq(50,130, by = 5), xlab = "Average CO2 Emission (mL/hour)")
histogram( ~ gasEmission | temperature, data = plantgasData, layout = c(1,2), col = "pink", breaks = seq(50,130, by = 5), xlab = "Average CO2 Emission (mL/hour)", main = "Effects of temperature on carbon dioxide emissions")
library(car)
library(car)
install.packages("~/Downloads/car_2.1-4.tgz", repos = NULL, type = .Platform$pkgType)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(car)
library(car)
install.packages("~/Downloads/pbkrtest_0.4-7.tgz", repos = NULL, type = .Platform$pkgType)
library("pbkrtest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("~/Downloads/lme4_1.1-13.tgz", repos = NULL, type = .Platform$pkgType)
library("lme4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:lme4", unload=TRUE)
var.test(gasEmission ~ temperature, data = plantgasData)
t.test(gasEmission ~ temperature, data = plantgasData, var.equal = TRUE)
library(readr)
frogData <- read_csv("~/Downloads/frogskin_data.csv")
View(frogData)
frogData$treatment <- factor(frogData$treatment, levels = c("control", "group 1", "group 2", "group 3"))
par(bty = "o")
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", col = "redblue", cex - 1.2, ylim = c(-3, 4))
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", col = "redblue", cex = 1.2, ylim = c(-3, 4))
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", col = "bluered", cex = 1.2, ylim = c(-3, 4))
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", col = "deeppink", cex = 1.2, ylim = c(-3, 4))
View(frogData)
View(frogData)
View(frogData)
View(frogData)
frogData$treatment <- factor(frogData$treatment, levels = c("control", "group1", "group2", "group3"))
frogData <- read_csv("~/Downloads/frogskin_data.csv")
frogData$treatment <- factor(frogData$treatment, levels = c("control", "group1", "group2", "group3"))
par(bty = "o")
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", col = "deeppink", cex = 1.2, ylim = c(-3, 4))
view(frogData)
View(frogData)
frogDataAnova <- lm(tempChange ~ treatment, data = frogData)
anova(frogDataAnova)
stripchart(tempChange ~ treatment, data = frogData, method = "jitter", vertical = TRUE, las = 1, pch = 16, xlab = "Sunscreen Treatments", ylab = "Skin Temperature Changes", main = "Frog Skin Temperature" col = "deeppink", cex = 1.2, ylim = c(-3, 4))
library(readr)
brain_data <- read_csv("~/Downloads/brain_data.csv")
View(brain_data)
head(brain_data)
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, bty = "1", xlim = c(0,0.7), ylim = c(10,74), main = "Energy Supply Based on Sleep", ylab = "Sleep Deprivation", xlab = "Brain ATP Levels (mM/g"))
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, bty = "1", xlim = c(0,0.7), ylim = c(10,74), main = "Energy Supply Based on Sleep", ylab = "Sleep Deprivation", xlab = "Brain ATP Levels (mM/g")
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, bty = "0", xlim = c(0,0.7), ylim = c(10,74), main = "Energy Supply Based on Sleep", ylab = "Sleep Deprivation", xlab = "Brain ATP Levels (mM/g")
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, xlim = c(0,0.7), ylim = c(10,74), main = "Energy Supply Based on Sleep", ylab = "Sleep Deprivation", xlab = "Brain ATP Levels (mM/g")
View(brain_data)
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, bty ="1", xlim = c(0,0.7), ylim = c(0,74), main = "Energy Supply Based on Sleep", ylab = "Hours without Sleep", xlab = "Brain ATP Levels (mM/g")
par(bty = "1")
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="blueviolet", las = 1, cex = 1.5, bty ="l", xlim = c(0,0.7), ylim = c(0,74), main = "Energy Supply Based on Sleep", ylab = "Hours without Sleep", xlab = "Brain ATP Levels (mM/g")
brainCor <- cor.test(brain_data$sleepDep, brain_data$brainATP)
brainCor
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col="firebrick", las = 1, cex = 1.5, bty ="l", xlim = c(0,0.7), ylim = c(0,74), main = "Energy Supply Based on Sleep", ylab = "Hours without Sleep", xlab = "Brain ATP Levels (mM/g")
plot(brainATP ~ sleepDep, data = brain_data, pch = 16, col = "firebrick", las = 1, cex = 1.5, bty ="l", xlim = c(0,0.7), ylim = c(0,74), main = "Energy Supply Based on Sleep", ylab = "Hours without Sleep", xlab = "Brain ATP Levels (mM/g")
View(brain_data)
library(readr)
brainData <- read_csv("~/Downloads/brain_data.csv")
head(brainData)
plot(sleepDep ~ brainATP, data = brainData, pch = 16, col = "blueviolet", las = 1, cex = 1.5, bty = "l", xlim = c(0,0.7), ylim = c(0,74), main = "Energy Supply", ylab = "Sleep Deprivation (hrs)", xlab = "Brain ATP Levels (mM/g)")
brainCor
library(readr)
birdfeed <- read_csv("~/Downloads/birdfeed_data.csv")
View(birdfeed)
head(birdfeed)
birdfeedFullModelTypeIII <- lm(geneExp ~ habitat * diet, data = birdfeed, constrasts = list(habitat = contr.sum, herbivores = contr.sum))
library(car)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(car)
install.packages("~/Downloads/minqa_1.2.4.tgz", repos = NULL, type = .Platform$pkgType)
library("minqa", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(car)
install.packages("~/Downloads/minqa_1.2.4.tar.gz", repos = NULL, type = "source")
library("minqa", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:minqa", unload=TRUE)
remove.packages("minqa")
install.packages("ndl")
library(car)
install.packages("minqa")
library(car)
install.packages("nloptr")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:car", unload=TRUE)
library(car)
brew reinstall emacs
update.packages(ask=FALSE)
library(car)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
version
install.packages("~/Downloads/R-3.4.0.pkg", repos = NULL)
library(car)
install.packages("car")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(car)
View(birdfeed)
View(birdfeed)
plot(birdfeed)
View(plantgasData)> library(lattice)
> histogram( ~ gasEmission | temperature, data = plantgasData, layout = c(1,2), col = "pink", breaks = seq(50,130, by = 5), xlab = "Average CO2 Emission (mL/hour)", main = "Effects of temperature on carbon dioxide emissions")
histogram( ~ gasEmission | temperature, data = plantgasData, layout = c(1,2), col = "pink", breaks = seq(50,130, by = 5), xlab = "Average CO2 Emission (mL/hour)", main = "Effects of temperature on carbon dioxide emissions")
head(birdfeed)
birdfeedFullModelTypeIII
library(car)
install.packages(car)
install.packages("car")
library(car)
Anova(birdfeedFullModelTypeIII, type = "III")
install.packages("multcomp")
library(readr)
birdfeed <- read_csv("~/Downloads/birdfeed_data.csv")
View(birdfeed)
birdfeedFullModelTypeIII <- lm(geneExp ~ habitat * diet, data = birdfeed, contrasts = list(habitat = contr.sum, diet = contr.sum))
library(car)
Anova(birdfeedFullModelTypeIII, type = "III")
library(readr)
anthrax <- read_csv("~/Downloads/AnthraxMortality.csv")
View(anthrax)
library(readr)
salmon <- read_csv("~/Downloads/chap16q18SalmonSalmonberries.csv")
View(salmon)
std.error(salmon)
sd(salmon)
var(salmon)
data = read.csv('./data/diamonds.csv')
if(require(pacman)==FALSE) install.packages("pacman")
## Loading required package: pacman
pacman::p_load(tidyverse)
ggplot(diamonds,aes(carat,price))+ geom_point()+theme_bw()
ggsave("diamonds.pdf")## Saving image
write_csv(diamonds,"diamonds.csv")
data = read.csv('./data/diamonds.csv')
setwd("/Users/jemmams")
if(require(pacman)==FALSE) install.packages("pacman")
## Loading required package: pacman
pacman::p_load(tidyverse)
ggplot(diamonds,aes(carat,price))+ geom_point()+theme_bw()
ggsave("diamonds.pdf")## Saving image
write_csv(diamonds,"diamonds.csv")
setwd("/Users/jemmams")
data = read.csv('')
diamonds <- read.csv("~/diamonds.csv")
View(diamonds)
if(require(pacman)==FALSE) install.packages("pacman")
## Loading required package: pacman
pacman::p_load(tidyverse)
ggplot(diamonds,aes(carat,price))+ geom_point()+theme_bw()
ggsave("diamonds.pdf")## Saving image
write_csv(diamonds,"diamonds.csv")
data = read.csv("~/diamonds.csv")
MAE=function(x){
mean(abs(x))
}
x=rnorm(50)
MAE(x)
source("MAE.R")
MAE(x)
source("MAE.R")
x=rnorm(100)
MAE(x)
FSB_BI_Survey_2019_2021 <- readRDS("/Users/jemmams/Downloads/FSB_BI_Survey_2019_2021.rds")
write.csv(FSB_BI_Survey_2019_2021,file="FSB_Survey.csv")
View(FSB_BI_Survey_2019_2021)
FSB_Survey_Dirty <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/My Documents/Miami Data Courses/Fall 2023/ISA 616/github/ISA616-Project2-Group12/FSB_Survey_Dirty.csv", header=FALSE)
View(FSB_Survey_Dirty)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("FSB_Survey_Dirty.csv")
## Data overview
head(df)
## Check missing values
colSums(is.na(df))
## Delete "X" variable
df <- df[-which(names(df) == "X")]
df <- df[, !(names(df) %in% c("BBRJ","Study.Abroad.Courtesy.Account", "Transfer.Work..Pre.Banner."))]
df <- df[, !(names(df) %in% c("nmajor", "Business.Direct.Admit", "First.Generation.College.Stdnt", "Combined.Bacc.and.Masters", "Dean.s.List", "FSB.Scholars", "Honors.Program", "President.s.List", "Cum.Laude", "Magna.Cum.Laude", "Summa.Cum.Laude", "University.Honors","UniversityHonors.w.Distinction", "year.x", "latin_honors", "survey_gradprogram", "survey_gradschool",
"survey_internfour","survey_internone", "survey_internships", "survey_internthree", "survey_interntwo"))]
## Check for changes
head(df)
## Check dimensions
dim(df)
## Remove rows that contain a null value for "survey_state"
df <- df %>% filter(!is.na(survey_state))
## Remove rows that contain a null value for "survey_state"
df <- df[!is.na(df$survey_state), , drop = FALSE]
## Check data again
str(df)
df[, c("survey_city", "survey_company", "survey_deptfunc")] <- lapply(df[, c("survey_city", "survey_company", "survey_deptfunc")], function(x) ifelse(is.na(x), "Unknown", x))
df[, c("survey_offers", "survey_pref_field", "survey_pref_loc")] <- lapply(df[, c("survey_offers", "survey_pref_field", "survey_pref_loc")], function(x) ifelse(is.na(x), "None", x))
df$survey_salary[is.na(df$survey_salary)] <- mean(df$survey_salary, na.rm = TRUE)
write.csv(df, file = "FSB_Survey.csv", row.names = FALSE)
FSB_BI_Survey_2019_2021 <- read.table("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/My Documents/Miami Data Courses/Fall 2023/ISA 616/github/ISA616-Project2-Group12/FSB_BI_Survey_2019_2021.rds", header=TRUE, quote="\"")
View(FSB_BI_Survey_2019_2021)
View(FSB_BI_Survey_2019_2021)
View(FSB_BI_Survey_2019_2021)
View(FSB_Survey_Dirty)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/My Documents/Miami Data Courses/Fall 2023/ISA 616/github/ISA616-Project2-Group12")
df <- readRDS('FSB_BI_Survey_2019_2021.rds')
colSums(is.na(df))
colSums(is.na(df))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
df <- readRDS('FSB_BI_Survey_2019_2021.rds')
head(df)
df <- df[, !(names(df) %in% c("BBRJ","Study Abroad Courtesy Account", "Transfer Work (Pre-Banner)"))]
df <- df[, !(names(df) %in% c("nmajor", "Business Direct Admit", "First Generation College Stdnt", "Combined Bacc and Masters", "Dean's List", "FSB Scholars", "Honors Program", "President's List", "Cum Laude", "Magna Cum Laude", "Summa Cum Laude", "University Honors","UniversityHonors w/Distinction", "year.x", "latin_honors", "survey_gradprogram", "survey_gradschool", "survey_internfour","survey_internone", "survey_internships", "survey_internthree", "survey_interntwo"))]
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
internraw=readRDS("final_intern_data2021.rds")
data=internraw
filter(intern_stats =="Yes")
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer) %>%
summarize(count=n())
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1) %>%
summarize(count=n())
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
internraw=readRDS("final_intern_data2021.rds")
rate = round(100*nrow(internraw)/800,0)
gauge(rate, min=0, max = 100, symbol = '%', gaugeSectors(success = c(80,100), warning=c(40,79), danger = c(0, 39)))
nusable = nrow(internraw)
valueBox(nusable, icon="fa-users")
# you can find the icons here:https://fontawesome.com/icons
# note that I have been unable to get all icons to work
p = ggplot(internraw, aes(x=classrank))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Class Rank")+
ylab("Numberof Responses")+
theme_bw()
ggplotly(p)
p = ggplot(internraw,aes(reorder(intern_status, intern_status, function(x)-length(x))))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Internship Status")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p = internraw %>%
ggplot(aes(x=reorder(major_1,major_1,function(x)-length(x))))+
geom_bar(color="steelblue", fill = "steelblue")+
xlab("Internship Status")+
ylab("Number of Responses")+
theme_bw()
p
p=internraw %>%
ggplot(aes(x=reorder(major_1, major_1,function(x)-length(x)),fill=intern_status))+
geom_bar(color="deeppink")+
xlab("Primary Major")+
ylab("Number of Responses")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))
ggplotly(p)
p = internraw %>%
mutate(careerfair_status=fct_relevel(careerfair_status,"Fall","Spring", "Both", "Neither")) %>%
ggplot(aes(x=careerfair_status,fill=intern_status))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Career Fair Status")+
ylab("Number of Responses")+
theme_bw()
p
p = internraw %>%
mutate(careerfair_status=fct_relevel(careerfair_status,"Fall","Spring", "Both", "Neither")) %>%
ggplot(aes(x=careerfair_status,fill=intern_status))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Career Fair Status")+
ylab("Number of Responses")+
theme_bw()
theme(axis.text.x=element_text(angle=90))
facet_wrap(~major_1,ncol=2)
p
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1) %>%
summarize(count=n())
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1,classrank) %>%
summarize(count=n())
arrange(major_1-count)#arrange in descending order based on the size of the major
arrange(major_1,-count)
data$employer=fct_explicit_na(data$employer,"unknown") #replace nulls with "unknown" (seems to be a fillna() python alternative)
datatable(data,rownames=F) #this is to remove numbered rows
datatable(data,rownames=F,extensions='Buttons',
options=list(dom='Bfrtip',
buttons=c('copy','csv','excel')
),
filter=list(position='bottom',
clear=F,plain=T
)
)
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
colnames(data)[colnames(data) == "survey_city"] <- "city"
cities = read.csv('uscities.csv')
city_loc <- cities[, c("city", "state_id", "lat", "lng")]
grouped_data <- data %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
setwd("C:/Users/Linjie Zhu/Documents/GitHub/ISA616-Project2-Group12")
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
colnames(data)[colnames(data) == "survey_city"] <- "city"
cities = read.csv('uscities.csv')
city_loc <- cities[, c("city", "state_id", "lat", "lng")]
grouped_data <- data %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
cities = read.csv('uscities.csv')
df[5, "survey_state"] <- "IL"
df[1107, "survey_state"] <- "IL"
df[1385, "survey_state"] <- "DC"
df[1438, "survey_state"] <- "IL"
df[1440, "survey_state"] <- "IL"
df[1480, "survey_state"] <- "MI"
df[51, "survey_city"] <- "INDIANAPOLIS"
df[1385, "survey_city"] <- "WASHINGTON"
df[1417, "survey_city"] <- "WASHINGTON"
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
head(df_final)
df %>% count(city_state) %>% arrange(desc(n)) %>% head(10)
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
library(sf)
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
city_map_sdf = st_as_sf(city_map_df,
coords=c("df_final.lng", "df_final.lat"), crs=4326)
mapview(city_map_sdf, label=city_map_sdf$city_state)
install.packages("mapview")
mapview(city_map_sdf, label=city_map_sdf$city_state)
library(mapview)
mapview(city_map_sdf, label=city_map_sdf$city_state)
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = df_final) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~city_state,
lat = ~lat,
lng = ~lng,
popup = ~paste("City:", city_state, "<br>Avg Salary:", round(AvgSalary, 2))
)
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~city_state,
lat = ~lat,
lng = ~lng,
popup = ~paste("City:", city_state, "<br>Avg Salary:", round(AvgSalary, 2))
)
View(city_map_df)
View(city_map_sdf)
View(city_map_df)
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", city_state, "<br>Avg Salary:", round(AvgSalary, 2))
)
View(city_map_df)
View(city_map_sdf)
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
View(df_final)
library(mapview)
library(sf)
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
city_map_sdf = st_as_sf(city_map_df,
coords=c("df_final.lng", "df_final.lat"), crs=4326)
mapview(city_map_sdf, label=city_map_sdf$city_state, attribution = "")
mapview(city_map_sdf, label=city_map_sdf$city_state, attribution = " ")
head(df_final)
df %>% count(city_state) %>% arrange(desc(n)) %>% head(10)
library(mapview)
library(sf)
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
city_map_sdf = st_as_sf(city_map_df,
coords=c("df_final.lng", "df_final.lat"), crs=4326)
map <- mapview(city_map_sdf, label=city_map_sdf$city_state, attribution = " ")
map$layout$legend <- FALSE
