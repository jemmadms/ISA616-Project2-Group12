## Data overview
head(df)
## Check missing values
colSums(is.na(df))
## Delete "X" variable
df <- df[-which(names(df) == "X")]
df <- df[, !(names(df) %in% c("BBRJ","Study.Abroad.Courtesy.Account", "Transfer.Work..Pre.Banner."))]
df <- df[, !(names(df) %in% c("nmajor", "Business.Direct.Admit", "First.Generation.College.Stdnt", "Combined.Bacc.and.Masters", "Dean.s.List", "FSB.Scholars", "Honors.Program", "President.s.List", "Cum.Laude", "Magna.Cum.Laude", "Summa.Cum.Laude", "University.Honors","UniversityHonors.w.Distinction", "year.x", "latin_honors", "survey_gradprogram", "survey_gradschool",
"survey_internfour","survey_internone", "survey_internships", "survey_internthree", "survey_interntwo"))]
## Check for changes
head(df)
## Check dimensions
dim(df)
## Remove rows that contain a null value for "survey_state"
df <- df %>% filter(!is.na(survey_state))
## Remove rows that contain a null value for "survey_state"
df <- df[!is.na(df$survey_state), , drop = FALSE]
## Check data again
str(df)
df[, c("survey_city", "survey_company", "survey_deptfunc")] <- lapply(df[, c("survey_city", "survey_company", "survey_deptfunc")], function(x) ifelse(is.na(x), "Unknown", x))
df[, c("survey_offers", "survey_pref_field", "survey_pref_loc")] <- lapply(df[, c("survey_offers", "survey_pref_field", "survey_pref_loc")], function(x) ifelse(is.na(x), "None", x))
df$survey_salary[is.na(df$survey_salary)] <- mean(df$survey_salary, na.rm = TRUE)
write.csv(df, file = "FSB_Survey.csv", row.names = FALSE)
FSB_BI_Survey_2019_2021 <- read.table("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/My Documents/Miami Data Courses/Fall 2023/ISA 616/github/ISA616-Project2-Group12/FSB_BI_Survey_2019_2021.rds", header=TRUE, quote="\"")
View(FSB_BI_Survey_2019_2021)
View(FSB_BI_Survey_2019_2021)
View(FSB_BI_Survey_2019_2021)
View(FSB_Survey_Dirty)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/My Documents/Miami Data Courses/Fall 2023/ISA 616/github/ISA616-Project2-Group12")
df <- readRDS('FSB_BI_Survey_2019_2021.rds')
colSums(is.na(df))
colSums(is.na(df))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
df <- readRDS('FSB_BI_Survey_2019_2021.rds')
head(df)
df <- df[, !(names(df) %in% c("BBRJ","Study Abroad Courtesy Account", "Transfer Work (Pre-Banner)"))]
df <- df[, !(names(df) %in% c("nmajor", "Business Direct Admit", "First Generation College Stdnt", "Combined Bacc and Masters", "Dean's List", "FSB Scholars", "Honors Program", "President's List", "Cum Laude", "Magna Cum Laude", "Summa Cum Laude", "University Honors","UniversityHonors w/Distinction", "year.x", "latin_honors", "survey_gradprogram", "survey_gradschool", "survey_internfour","survey_internone", "survey_internships", "survey_internthree", "survey_interntwo"))]
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
internraw=readRDS("final_intern_data2021.rds")
data=internraw
filter(intern_stats =="Yes")
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer) %>%
summarize(count=n())
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1) %>%
summarize(count=n())
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
#package intialization
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(tidyverse, #for data manipulation
plotly, #for interactive plots
flexdashboard, #to make a dashboard
fontawesome, #for icons
DT #for better tables
)
#read in data
internraw=readRDS("final_intern_data2021.rds")
rate = round(100*nrow(internraw)/800,0)
gauge(rate, min=0, max = 100, symbol = '%', gaugeSectors(success = c(80,100), warning=c(40,79), danger = c(0, 39)))
nusable = nrow(internraw)
valueBox(nusable, icon="fa-users")
# you can find the icons here:https://fontawesome.com/icons
# note that I have been unable to get all icons to work
p = ggplot(internraw, aes(x=classrank))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Class Rank")+
ylab("Numberof Responses")+
theme_bw()
ggplotly(p)
p = ggplot(internraw,aes(reorder(intern_status, intern_status, function(x)-length(x))))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Internship Status")+
ylab("Number of Responses")+
theme_bw()
ggplotly(p)
p = internraw %>%
ggplot(aes(x=reorder(major_1,major_1,function(x)-length(x))))+
geom_bar(color="steelblue", fill = "steelblue")+
xlab("Internship Status")+
ylab("Number of Responses")+
theme_bw()
p
p=internraw %>%
ggplot(aes(x=reorder(major_1, major_1,function(x)-length(x)),fill=intern_status))+
geom_bar(color="deeppink")+
xlab("Primary Major")+
ylab("Number of Responses")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))
ggplotly(p)
p = internraw %>%
mutate(careerfair_status=fct_relevel(careerfair_status,"Fall","Spring", "Both", "Neither")) %>%
ggplot(aes(x=careerfair_status,fill=intern_status))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Career Fair Status")+
ylab("Number of Responses")+
theme_bw()
p
p = internraw %>%
mutate(careerfair_status=fct_relevel(careerfair_status,"Fall","Spring", "Both", "Neither")) %>%
ggplot(aes(x=careerfair_status,fill=intern_status))+
geom_bar(color="deeppink", fill = "deeppink")+
xlab("Career Fair Status")+
ylab("Number of Responses")+
theme_bw()
theme(axis.text.x=element_text(angle=90))
facet_wrap(~major_1,ncol=2)
p
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1) %>%
summarize(count=n())
data=internraw %>%
filter(intern_status =="Yes") %>%
filter(pay_status=="Yes") %>%
group_by(employer,major_1,classrank) %>%
summarize(count=n())
arrange(major_1-count)#arrange in descending order based on the size of the major
arrange(major_1,-count)
data$employer=fct_explicit_na(data$employer,"unknown") #replace nulls with "unknown" (seems to be a fillna() python alternative)
datatable(data,rownames=F) #this is to remove numbered rows
datatable(data,rownames=F,extensions='Buttons',
options=list(dom='Bfrtip',
buttons=c('copy','csv','excel')
),
filter=list(position='bottom',
clear=F,plain=T
)
)
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
colnames(data)[colnames(data) == "survey_city"] <- "city"
cities = read.csv('uscities.csv')
city_loc <- cities[, c("city", "state_id", "lat", "lng")]
grouped_data <- data %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
setwd("C:/Users/Linjie Zhu/Documents/GitHub/ISA616-Project2-Group12")
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
library(dplyr)
library(readr)
library(magrittr)
data <- read.csv('FSB_Survey1.csv')
colnames(data)[colnames(data) == "survey_city"] <- "city"
cities = read.csv('uscities.csv')
city_loc <- cities[, c("city", "state_id", "lat", "lng")]
grouped_data <- data %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(dplyr)
setwd("C:/Users/Linjie Zhu/Documents/GitHub/ISA616-Project2-Group12")
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey1.csv')
cities = read.csv('uscities.csv')
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
head(df_final)
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
head(df_final)
df %>% count(city_state) %>% arrange(desc(n)) %>% head(10)
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
library(mapview)
library(sf)
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
city_map_sdf = st_as_sf(city_map_df,
coords=c("df_final.lng", "df_final.lat"), crs=4326)
mapview(city_map_sdf, label=city_map_sdf$city_state, attribution = " ")
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
cities = read.csv('uscities.csv')
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
cities = read.csv('uscities.csv')
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
sessionInfo()
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
cities = read.csv('uscities.csv')
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
sessionInfo()
library(dplyr)
library(readr)
library(magrittr)
df <- read.csv('FSB_Survey.csv')
cities = read.csv('uscities.csv')
df <- df %>% mutate(city_state = paste(survey_city, ", ", survey_state))
cities <- cities %>% mutate(city_state = toupper(paste(city, ", ", state_id)))
df_final <- left_join(df, cities %>% select(city_state, lat, lng), by = "city_state")
grouped_data <- df %>%
group_by(survey_state) %>%
summarize(AvgSalary = mean(survey_salary),
OfferCount = n()) %>%
filter(OfferCount >= 10)
library(ggplot2)
# Sort the grouped data by AvgSalary in descending order
grouped_data <- grouped_data %>%
arrange(desc(AvgSalary))
# Take the top 10 states
top_10_states <- head(grouped_data, 10)
# Create a bar chart for the top 10 states
ggplot(top_10_states, aes(x = reorder(survey_state, -AvgSalary), y = AvgSalary)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "State", y = "Average Salary") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
offers_by_city <- df_final %>%
group_by(city_state) %>%
summarize(Offer_Count = n())
ranked_offers <- offers_by_city %>%
arrange(desc(Offer_Count)) %>%
mutate(Rank = row_number())
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
top_10_cities <- head(ranked_offers, 10)
# Create a bar chart for the top 10 cities
ggplot(top_10_cities, aes(x = reorder(city_state, -Offer_Count), y = Offer_Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "City", y = "Job Opportunities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing_values <- df_final[is.na(df_final$lat), ]
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
city_map_df = data.frame(df_final$lng, df_final$lat, df_final$city_state)
city_map_df = na.omit(city_map_df)
library(leaflet)
# Create a leaflet map for the top 10 cities
m <- leaflet(data = city_map_df) %>%
addTiles() %>%
setView(lng = -98, lat = 39, zoom = 4) %>%
addCircleMarkers(
radius = 8,
color = "blue",
label = ~df_final.city_state,
lat = ~df_final.lat,
lng = ~df_final.lng,
popup = ~paste("City:", df_final.city_state)
)
m
